import numpy as np

edges = np.array([
[0.50000,1.00000,0.50000,1.00000],
[0.50000,1.00000,0.51000,1.00667],
[0.50000,1.00000,1.00667,1.00667],
[0.50000,1.00000,1.50333,1.00667],
[2.50000,2.00000,2.50000,2.00000],
[2.50000,2.00000,2.00000,2.00000],
[2.50000,2.00000,2.00000,1.50333],
[2.50000,2.00000,1.50333,2.00000],
[0.51000,1.00667,0.51000,1.00667],
[0.51000,1.00667,0.50000,1.00000],
[0.51000,1.00667,1.00667,1.00667],
[0.51000,1.00667,1.50333,1.00667],
[1.00667,1.00667,1.00667,1.00667],
[1.00667,1.00667,0.51000,1.00667],
[1.00667,1.00667,1.50333,1.00667],
[1.00667,1.00667,0.50000,1.00000],
[1.00667,2.00000,1.00667,2.00000],
[1.00667,2.00000,1.50333,2.00000],
[1.00667,2.00000,2.00000,2.00000],
[1.50333,1.00667,1.50333,1.00667],
[1.50333,1.00667,2.00000,1.00667],
[1.50333,1.00667,1.00667,1.00667],
[1.50333,1.00667,2.00000,1.50333],
[1.50333,2.00000,1.50333,2.00000],
[1.50333,2.00000,2.00000,2.00000],
[1.50333,2.00000,1.00667,2.00000],
[1.50333,2.00000,2.00000,1.50333],
[2.00000,1.00667,2.00000,1.00667],
[2.00000,1.00667,1.50333,1.00667],
[2.00000,1.00667,2.00000,1.50333],
[2.00000,1.00667,1.00667,1.00667],
[2.00000,1.50333,2.00000,1.50333],
[2.00000,1.50333,2.00000,2.00000],
[2.00000,1.50333,2.00000,1.00667],
[2.00000,1.50333,1.50333,2.00000],
[2.00000,2.00000,2.00000,2.00000],
[2.00000,2.00000,1.50333,2.00000],
[2.00000,2.00000,2.00000,1.50333],
[2.00000,2.00000,2.50000,2.00000]])


milestones = np.array(
[[0.51000,1.00667],
[2.50000,2.00000],
[0.51000,1.00667],
[1.00667,1.00667],
[1.00667,2.00000],
[1.50333,1.00667],
[1.50333,2.00000],
[2.00000,1.00667],
[2.00000,1.50333],
[2.00000,2.00000]])

target = 5
# find all points in milestones that are connected to another by an edge
from_edge_idx = np.where(np.equal(edges[:, :2],milestones[target]).all(axis=1))[0]
pt_idx = []
for pt in from_edge_idx:
    temp = np.equal(milestones[:, :2],edges[pt, 2:4])
    pt_idx.append((np.where(temp[:,0] & temp[:,1])[0][0]))

print(pt_idx)
edge_index = []
for i in range(len(edges)):
    if np.array_equal(edges[i,:2],milestones[target,:]):
            edge_index.append(i)
index = []
for pt in edge_index:
    index.append(edges[pt,2:4])
neighbors = []
ii = np.where( np.array_equal(milestones[:, :2],index))[0]

print("new: ", ii)